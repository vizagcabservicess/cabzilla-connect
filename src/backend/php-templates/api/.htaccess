
# Enable URL rewriting with aggressive CORS configuration
RewriteEngine On
RewriteBase /api/

# CRITICAL: Force PHP processing for all .php files - MUST BE FIRST!
<FilesMatch "\.php$">
    # Ensure PHP files are processed correctly
    SetHandler application/x-httpd-php
    # Set JSON content type for API responses
    Header always set Content-Type "application/json"
    # No caching for PHP files
    Header set Cache-Control "no-cache, no-store, must-revalidate"
    Header set Pragma "no-cache"
    Header set Expires "0"
</FilesMatch>

# CRITICAL: Respond with 200 OK for OPTIONS preflight requests (highest priority)
RewriteCond %{REQUEST_METHOD} OPTIONS
RewriteRule .* - [R=200,L]

# Set access headers for all responses
<IfModule mod_headers.c>
    # Set CORS headers unconditionally for all responses
    Header always set Access-Control-Allow-Origin "*"
    Header always set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
    Header always set Access-Control-Allow-Headers "*"
    Header always set Access-Control-Max-Age "86400"
    Header always set Access-Control-Expose-Headers "*"
    Header always set X-Content-Type-Options "nosniff"
</IfModule>

# Direct API routes to their PHP handlers
RewriteCond %{REQUEST_FILENAME}.php -f
RewriteRule ^(.*)$ $1.php [L]

# Admin API subdirectory handling - if it exists as a directory
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^(.*)$ $1/index.php [L]

# Explicitly handle /admin in the API context
RewriteRule ^admin$ admin/index.php [L]
RewriteRule ^admin/$ admin/index.php [L]

# Add a catch-all to prevent 404 errors for misconfigured API paths
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php [L,QSA]
